#!/usr/bin/env ansible-playbook
---

- { import_playbook: asserts.yml, when: assert is defined, vars: { Hosts: localhost }}

- name: Generate an user password
  hosts: localhost
  gather_facts: True

  vars: { pass_subdir: '{{ "users/" + ("alien/" + set if set is defined else "linux") }}' }
  vars_files: [ '{{ "paths" + ("-" + set if set is defined else "") + ".yml" }}' ]

  tasks:

    - meta: noop
      vars:
        macros:
          - &ro
            changed_when: False
            check_mode: False
          - &pass
            environment:
              PASSWORD_STORE_GIT: '{{ password_store }}'
              PASSWORD_STORE_DIR: '{{ password_store_dir }}'
              PASSWORD_STORE_ENABLE_EXTENSIONS: 'true'

    - include_tasks: include/user-get.yml

    - stat: { path: '{{ password_store_dir + "/users/linux/" + trigram + ".gpg" }}' }
      register: st
      name: Stat user password file

    - when: st.stat.exists == False or force is defined
      name: Creation block
      block:

      - command:
        args:
          argv: [ makepasswd, '--crypt-md5' ]
        register: makepasswd
        <<: *ro
        name: Generate password and MD5

      - set_fact: { password: '{{ makepasswd.stdout.split(" ") | select("!=", "") | list }}' }
        name: Separate password and MD5

      - { command: date +%F, register: date, <<: *ro, tags: always, name: Get date }

      - command:
        <<: *pass
        args:
          argv: '{{ pass_cmd  + [ pass_name ] }}'
          stdin: |
            {{ passw }}
            md5: {{ md5 }}
            login: {{ login }}
            name: {{ name }}
            date: {{ date.stdout }}
        vars:
          pass_cmd: [ pass, insert, -m ]
          pass_name: '{{ pass_subdir + "/" + trigram }}'
          login: '{{ user.login }}'
          name:  '{{ user.name }}'
          mail:  '{{ user.mail }}'
          passw: '{{ password[0] }}'
          md5:   '{{ password[1] }}'
        name: Store password and MD5 using pass

    - command: pass ogit ls-files -o --exclude-standard
      <<: *pass
      <<: *ro
      register: untracked
      name: Get untracked files list

    - assert:
        that: untracked.stdout_lines|length|int == 1
        fail_msg: We should'nt have more than one new file to add and commit (the new pass)
      when: untracked.stdout_lines|length|int
      name: Check that we only have a single new file

    - command: pass ogit {{ item }}
      <<: *pass
      when: untracked.stdout_lines|length|int
      with_items:
        - add .
        - commit -m 'Adds {{ login }} via ansible'
      name: Add password

    - command: pass ogit rev-parse @
      <<: *pass
      <<: *ro
      register: head
      name: Get head

    - command: pass ogit rev-parse @{u}
      <<: *pass
      <<: *ro
      register: upstream
      name: Get upstream

    - command: pass ogit push
      <<: *pass
      when: head.stdout != upstream.stdout
      name: Push new password

    - meta: end_play
