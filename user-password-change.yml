#!/usr/bin/env ansible-playbook
---

- { import_playbook: asserts.yml, when: assert is defined }

- name: Asserts args
  hosts: &hosts '!g_poweredoff'
  gather_facts: False
  tags: always

  vars_files: [ '{{ "paths" + ("-" + set if set is defined else "") + ".yml" }}' ]

  tasks:

    - delegate_to: localhost
      run_once: True
      block:

      - include_vars: { name: data, file: '{{ data_users }}/{{ users_file }}' }
        name: Include users data

      - assert: { that: 'trigram is defined and data.users.trigram[trigram] is defined' }
        name: Check args

      - set_fact: { user: '{{ data.users.trigram[trigram] }}' }
        name: Get user data

      - meta: end_play
      - debug: { var: user }

- name: Get user password
  hosts: *hosts
  gather_facts: False
  tags: always

  vars_files: [ '{{ "paths" + ("-" + set if set is defined else "") + ".yml" }}' ]
  vars:
    pass_subdir: '{{ "users/" + ("alien/" + set if set is defined else "linux") }}'

  tasks:

    - delegate_to: localhost
      run_once: True
      block:

      - stat: { path: '{{ password_store_dir + "/" + pass_subdir + "/" + trigram + ".gpg" }}' }
        register: st
        name: Stat user password file

      - assert: { that: st.stat.exists == True }
        name: Check password file

      - set_fact: { password_args: '{{ pass_subdir + "/" + trigram + " directory=" + password_store_dir }}' }
        name: Use passwordstore
      - set_fact: { md5_args: '{{ password_args + " subkey=md5" }}' }
        name: Use md5
      - set_fact: { md5: '{{ lookup("passwordstore", md5_args) }}' }
        name: Get password


- name: Make on host user group
  hosts: *hosts
  gather_facts: False
  vars: { has_user: False }
  tasks:

    - { meta: noop, vars: { macros: &ro { changed_when: False, check_mode: False }}}

    - name: Get user existence
      <<: *ro
      register: getent
      failed_when: getent.rc == 1 or getent.rc == 3
      command: getent passwd {{ user.login }}

    - set_fact: { has_user: True }
      when: getent.rc == 0
      name: Keep user existence
    - group_by: { key: 'has_user_{{ has_user }}' }
      name: Make a group

    - meta: end_play
    - debug: { var: getent }

- name: Change password
  hosts: has_user_True
  gather_facts: False
  tasks:

    - set_fact: { login: '{{ user.login}}' }
      name: Get user login

    - user:
        name: '{{ login }}'
        password: '{{ md5 }}'
      become: True
      name: Change user password

    - meta: end_play
    - debug: { var: md5 }
