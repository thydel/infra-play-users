#!/usr/bin/env ansible-playbook
---

# env DISPLAY_SKIPPED_HOSTS=False

- name: Defines YAML macros
  hosts: all
  gather_facts: False
  vars:
    macros:
      - &ro # read only tasks
        changed_when: False
        check_mode: False
      - &loo # common local tasks
        delegate_to: localhost
        run_once: True

- name: &version_check Assertions for ansible versions and private files
  hosts: '{{ Hosts | default("all") }}'
  gather_facts: False
  tags: always

  vars_files: paths.yml

  tasks:

    - <<: *loo
      name: Ansible version {{ keys_file }} and {{ private_repos_file }}
      vars: &assert
        assertions: '{{ not no_assert | default(False) }}'
        version_check: '{{ not no_version_check | default(False) }}'
      when: assertions and version_check
      block:

      - debug: { msg: run with "-e no_assert=True" to disable all assertions }
      - debug: { msg: '{{ msgs | join(" ") }}' }
        vars: { msgs: [ run with "-e no_version_check=True" to disable, *version_check ] }
      - assert:
          that: running_ansible_version is version(local_min_ansible_version, '>=')
          fail_msg: min ansible version is {{ local_min_ansible_version }}, ansible version is {{ running_ansible_version }}
        vars:
          default_min_ansible_version: 2.7
          running_ansible_version: '{{ ansible_version.major ~ "." ~ ansible_version.minor }}'
          local_min_ansible_version: '{{ min_ansible_version | default(default_min_ansible_version) }}'
        name: Assert running_ansible_version ({{ running_ansible_version }}) >= {{ local_min_ansible_version }}

      - stat: { path: '{{ file }}' }
        vars: &prf { file: '{{ private_repos_file }}' }
        register: st
        name: Stat {{ file }}
      - assert:
          that: st.stat.exists
          fail_msg: |
            Create a {{ file }} file to define
            - data_nodes_repo
        vars: *prf
        name: Assert {{ file }}

      - stat: { path: '{{ file }}' }
        vars: &kf { file: '{{ keys_file }}' }
        register: st
        name: Stat {{ file }}
      - assert:
          that: st.stat.exists
          fail_msg: |
            Create a {{ file }} file to define
            - default_key
        vars: *kf
        name: Assert {{ file }}

- name: &agent_check Assertions for SSH and GPG agents
  hosts: '{{ Hosts | default("all") }}'
  gather_facts: False
  tags: always
  tasks:

    - <<: *loo
      name: Check ssh and gpg agent
      vars: { <<: *assert, agent_check: '{{ not no_agent_check | default(False) }}' }
      when: agent_check and assertions
      block:

      - debug: { msg: '{{ msgs | join(" ") }}' }
        vars: { msgs: [ run with "-e no_agent_check=True" to disable, *agent_check ] }
      - <<: *ro
        command: ssh-add -l
        register: ssh_add
        name: Get cached ssh keys
      - assert:
          that: ssh_add.rc == 0
          fail_msg: Empty ssh agent
        name: Assert we have cached ssh keys

      - git_config:
          name: user.email
          repo: .
          scope: local
        register: git_config
        name: Get user email from git config
      - assert:
          that: git_config.config_value != ''
          fail_msg: configure git user.email
      - <<: *ro
        name: Get keygrip of GPG key using email ID
        command: gpg2 --fingerprint --with-keygrip '<{{ git_config.config_value }}>'
        register: gpg_keygrip
      - assert:
          that: gpg_keygrip.rc == 0
          fail_msg: '{{ gpg_keygrip.stderr }}'
        name: Assert keygrip
      - <<: *ro
        name: Get gpg-agent cache status for GPG passphrase 
        command: gpg-connect-agent
        register: gpg_connect_agent
        args:
          stdin: keyinfo {{ gpg_keygrip.stdout_lines[-1].split()[-1] }}
      - assert:
          that: gpg_connect_agent.stdout_lines[0].split()[6]|int == 1
          fail_msg: passphrase for {{ git_config.config_value }} uncached
