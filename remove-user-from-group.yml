#!/usr/bin/env ansible-playbook
---

- name: Makes a group of nodes where user exists
  hosts: all
  gather_facts: False
  vars_files: [ paths.yml ]

  vars: { user_exists: False }

  tasks:

    - { meta: noop, vars: { macros: &loo { delegate_to: localhost, run_once: True }}}
    - { meta: noop, vars: { macros: &ro { changed_when: False, check_mode: False }}}
    - { assert: { that: 'groups.all | difference(play_hosts) != []' }, <<: *loo, name: Assert hosts subset }

    - include_tasks: include/user-get.yml

    - command: getent passwd {{ login }}
      register: getent
      <<: *ro
      failed_when: getent.rc == 1 or getent.rc == 3
      name: User existp

    - set_fact: { user_exists: True }
      when: getent.stdout_lines | count

    - group_by: { key: 'user_{{ user_exists }}' }

    - debug: { msg: 'user {{ login }} exists on {{ groups["user_True"] | join(", ") }}' }
      <<: *loo
      when: groups['user_True'] is defined

- name: Remove user from group (default ssh)
  hosts: user_True
  gather_facts: False
  vars_files: [ paths.yml ]

  tasks:

    - { assert: { that: 'groups.all | difference(play_hosts) != []' }, <<: *loo, name: Assert hosts subset }

    - include_tasks: include/user-get.yml

    - set_fact: { group: '{{ group | default("ssh")}}' }
      name: Default group to ssh

    - set_fact: { debug: '{{ debug | default(False) }}' }
      name: Default debug to False

    - command: groups {{ login }}
      register: groups_cmd
      <<: *ro
      name: Get groups of user {{ login }}

    - { debug: { var: groups_cmd }, when: debug }

    - command: deluser {{ login }} {{ group }}
      register: deluser
      failed_when: deluser.rc not in [ 0, 2, 6 ]
      changed_when: deluser.rc == 0
      become: True
      when: group in groups_cmd.stdout.split(":")[1].split(" ")
      name: Remove user {{ login }} from group {{ group }}

    - { debug: { var: deluser }, when: debug }
